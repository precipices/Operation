package com.operation.appoint;

import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Date;
import java.util.Vector;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;

import com.operation.common.Worker;
import com.operation.mainframe.InitComponent;
import com.operation.myComponent.BackButton;
import com.operation.myComponent.BackFrame;
import com.operation.myComponent.BackPane;
import com.operation.myComponent.BackScrollPane;
import com.operation.myComponent.BackToolBar;
import com.operation.select.DataTableModel;

public class SelectNursePane1 extends BackPane {
	BackToolBar toolBar;
	BackButton selectDate, selectName, selectId;
	BackButton backParent, submit;
	CardLayout card;
	BackPane select;
	String selectType = "按日期查询";
	JLabel beginDate;
	JTextField name;
	JTextField id;
	DataTableModel model;
	JTable table;
	Vector<Vector<String>> rowData = new Vector<Vector<String>>();
	public static AppointPane parentPane=null;
	public SelectNursePane1(AppointPane parentPane) {
		this.parentPane=parentPane;
		System.out.println("进入护士选择界面");
		this.setLayout(new BorderLayout());
		//上:JLabel
		JLabel jl=new JLabel("符合时间要求的护士有:");
		this.add(jl,BorderLayout.NORTH);

		// 中:数据表格
		model = new DataTableModel();
		model.setColumnNames(getColumnNames());
		model.setRowData(getRowData());
		table = new JTable(model);
		BackScrollPane center = new BackScrollPane(table);
		this.add(center, BorderLayout.CENTER);


		// 监听器
		// 1.查询方式选择监听器
		selectDate.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				card.show(select, "按日期查询");
				selectType = "按日期查询";
			}
		});
		selectName.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				card.show(select, "按姓名查询");
				selectType = "按姓名查询";
			}
		});
		selectId.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				card.show(select, "按ID查询");
				selectType = "按ID查询";
			}
		});
		// 2.开始查询监听器
		beginSelect.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				if (selectType.equals("按日期查询")) {
					System.out.println("按日期查询");
					if (InitComponent.helper == null) {
						JOptionPane.showMessageDialog(SelectNursePane1.this, "未连接服务器!");
					} else {
						Date begin = null;
						try {
							begin = Date.valueOf(beginDate.getText());
						} catch (Exception e) {
							JOptionPane.showMessageDialog(SelectNursePane1.this, "请选择日期!");
							return;
						}
						if (begin.getTime() > new java.util.Date().getTime() - 24 * 3600 * 1000) {
							System.out.println("begin.getTime()>now.getTime()-24*3600*1000");
							Vector<Worker> workers = InitComponent.helper.selectNursesByDate(begin);
							SelectNursePane1.this.setRowData(workers);
						} else {
							JOptionPane.showMessageDialog(SelectNursePane1.this, "不可查询过去的排班!");
						}
					}
				} else if (selectType.equals("按姓名查询")) {
					System.out.println("按姓名查询");
					if (InitComponent.helper == null) {
						JOptionPane.showMessageDialog(SelectNursePane1.this, "未连接服务器!");
					} else {
						
					}

				} else if (selectType.equals("按ID查询")) {
					System.out.println("按ID查询");
					if (InitComponent.helper == null) {
						JOptionPane.showMessageDialog(SelectNursePane1.this, "未连接服务器!");
					} else {
						Worker worker = InitComponent.helper.selectWorkerById(id.getText());
						SelectNursePane1.this.setRowData(worker);
					}

				}
			}
		});

		// 下:提交,返回
		backParent = new BackButton("返回");
		submit = new BackButton("提交");
		BackPane bottom = new BackPane();
		bottom.add(backParent);
		bottom.add(submit);
		this.add(bottom, BorderLayout.SOUTH);
		// 3.提交/返回监听器
		submit.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				JOptionPane.showMessageDialog(SelectNursePane1.this, "未写!");
				
			}
		});
		backParent.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
//				JOptionPane.showMessageDialog(SelectNursePane1.this, "未写!");
				SelectNursePane1.parentPane.showMain();
			}
		});
	}

	public Vector<String> getColumnNames() {
		Vector<String> columnNames = new Vector<String>();
		columnNames.add("ID");
		columnNames.add("姓名");
		columnNames.add("性别");
		columnNames.add("出生日期");
		columnNames.add("职位");
		columnNames.add("联系方式");
		columnNames.add("科室");
		return columnNames;
	}

	public Vector<Vector<String>> getRowData() {
		return rowData;
	}

	public void setRowData(Vector<Worker> workers) {
		Vector<Vector<String>> datas = new Vector<Vector<String>>();
		for (int i = 0; i < workers.size(); i++) {
			datas.add(workers.get(i).toVector());
		}
		this.rowData = datas;
		model.setRowData(rowData);
		model.fireTableDataChanged();
	}

	public void setRowData(Worker worker) {
		Vector<Vector<String>> datas = new Vector<Vector<String>>();
		if (worker != null)
			datas.add(worker.toVector());
		this.rowData = datas;
		model.setRowData(rowData);
		model.fireTableDataChanged();
	}

	public static void main(String[] args) {
		SelectNursePane1 p = new SelectNursePane1(null);
		JFrame f = new BackFrame("test", "./imgs/bg2.jpg");
		f.add(p);
		f.setBounds(200, 100, 800, 600);
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		f.setVisible(true);
		f.repaint();
	}
}