package com.operation.mainframe;

import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Vector;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JToolBar;

import com.operation.client.Inquire;
import com.operation.client.NewPatient;
import com.operation.common.Message;
import com.operation.common.Operation;
import com.operation.common.Worker;
import com.operation.myComponent.BackFrame;
import com.operation.myComponent.BackPane;
import com.operation.myComponent.BackToolBar;
import com.operation.rpc.RPCHelper;
import com.operation.select.MainSelectPane;

public class MainFrame extends BackFrame {
	private JToolBar jtb = null;
	private JButton operationButton, patientButton, selectButton;
	private ToolBarListener toolBarListener = null;
	private JPanel jp = null;
	private RPCHelper helper = null;
	private String id = null;
	private String position = null;
	private Worker worker = null;

	private JToolBar createToolBar() {
		toolBarListener = new ToolBarListener();// 设置监听器
		JToolBar jtb = new BackToolBar();// 新建工具条
		// 新建按扭
		operationButton = new JButton("手术");
		operationButton.addActionListener(toolBarListener);
		selectButton = new JButton("查询");
		selectButton.addActionListener(toolBarListener);
		operationButton.setOpaque(false);
		selectButton.setOpaque(false);
		// 添加按扭
		jtb.add(operationButton);
		jtb.add(selectButton);
		// 如果是医生账号，则可以有添加病人选项
		if (this.position.equals("医生")) {
			patientButton = new JButton("添加病人");
			patientButton.addActionListener(toolBarListener);
			patientButton.setOpaque(false);
			jtb.add(patientButton);
		}
		return jtb;
	}

	CardLayout card=null;
	private CardLayout createCardPanes(JPanel c) {
		CardLayout card=new CardLayout();
		c.setLayout(card);
		c.add(new com.operation.client.Operation(), "1");
		c.add(new MainSelectPane(),"2");
		c.add(new NewPatient(),"3");
		return card;
	}
	public MainFrame(RPCHelper helper, Worker worker) {
		super("手术预约排班系统", "./imgs/bg2.jpg");
		this.id = worker.getId();
		this.position = worker.getPosition();
		this.worker = worker;
		this.openGetMessagesThread();
		
		// 得到RPCHelper
		this.helper = helper;
		// 添加窗口关闭监听器
		this.addWindowListener(new MyWindowListener());
		// 添加工具条
		jtb = createToolBar();
		this.add(jtb, BorderLayout.NORTH);
		// 添加面板
		jp = new BackPane();
		this.add(jp, BorderLayout.CENTER);
		card=createCardPanes(jp);

		this.setBounds(200, 100, 800, 600);
		this.setDefaultCloseOperation(EXIT_ON_CLOSE);
		this.setVisible(true);
	}

	class ToolBarListener implements ActionListener {// 监听器类
		@Override
		public void actionPerformed(ActionEvent a) {
			if (a.getSource() == operationButton) {
				System.out.println("点击了手术按扭");
				card.show(jp, "1");
			} else if (a.getSource() == patientButton) {
				System.out.println("点击了病人按扭");
				card.show(jp, "2");

			} else if (a.getSource() == selectButton) {
				System.out.println("点击了查询按扭");
				card.show(jp, "3");
			}
		}
	}

	class MyWindowListener extends WindowAdapter {

		@Override
		public void windowClosing(WindowEvent e) {
			super.windowClosing(e);
			try {
				helper.close();
				System.out.println("关闭客户端");

			} catch (Exception e2) {
				System.out.println(e2 + "服务器已关闭！");
				System.exit(0);
			}
		}

	}

	private void openGetMessagesThread() {
		new Thread(new Runnable() {

			@Override
			public void run() {
				while (true) {
					Vector<Message> messages = helper.getMessages();
					String mes = null;
					ImageIcon imageIcon = new ImageIcon("./imgs/1.jpg");
					Object[] options = { "授受", "拒绝" };
					for (Message m : messages) {
						int type = m.getMessageType();
						// 得到信息
						Operation op = helper.selectOperationById(m.getOperationId());
						String operationName = op.getName();
						Worker fromWorker = helper.selectWorkerById(m.getFromId());
						int choose = 0;
						switch (type) {
						case Message.CHOOSE:// 你被邀请参与该手术
							mes = "医生[" + fromWorker.getName() + "]邀请你参与[" + op.getBeginTime() + "]的手术[" + operationName
									+ "]!";
							// 打开消息窗口
							choose = JOptionPane.showOptionDialog(MainFrame.this, mes, "手术邀请",
									JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, imageIcon, options,
									options[0]);
							if (choose == 0) {// 授受
								helper.sendMessage(m.getFromId(), m.getOperationId(), Message.ACCEPT);
							} else if (choose == 1) {// 拒绝
								helper.sendMessage(m.getFromId(), m.getOperationId(), Message.REFUSE);
								if (fromWorker.getPosition().equals("护士")) {
									helper.updateNurseToOperation(m.getOperationId(), null);
								} else if (fromWorker.getPosition().equals("麻醉师")) {
									helper.updateAnesthetistToOperation(m.getOperationId(), null);
								}
							}
							break;
						case Message.ACCEPT:// 对方接受了你的邀请
							mes = fromWorker.getPosition() + "[" + fromWorker.getName() + "]授受了你的[" + operationName
									+ "]手术邀请!";
							// 打开消息窗口
							JOptionPane.showMessageDialog(MainFrame.this, mes, "对方接受了邀请",
									JOptionPane.INFORMATION_MESSAGE, imageIcon);
							break;
						case Message.REFUSE:// 对方拒绝了你的邀请
							mes = fromWorker.getPosition() + "[" + fromWorker.getName() + "拒绝了你的[" + operationName
									+ "]手术邀请,点击确定系统将自动分配参与者!";
							// 打开消息窗口
							JOptionPane.showMessageDialog(MainFrame.this, mes, "对方拒绝了邀请",
									JOptionPane.INFORMATION_MESSAGE, imageIcon);
							// 自动分配员工
							Worker selectWorker = null;
							if (fromWorker.getPosition().equals("护士")) {
								selectWorker = helper.autoSelectNurse(op.getBeginTime(), m.getFromId());
								if (selectWorker == null) {
									mes = "当天没有有空的护士,建议修改手术时间!";
									JOptionPane.showMessageDialog(MainFrame.this, mes, "人员忙碌",
											JOptionPane.INFORMATION_MESSAGE, imageIcon);
									break;
								} else if (selectWorker.getId().equals(m.getFromId())) {
									mes = "除该护士外当天没有有空的护士,建议修改手术时间!";
									JOptionPane.showMessageDialog(MainFrame.this, mes, "人员忙碌",
											JOptionPane.INFORMATION_MESSAGE, imageIcon);
									break;
								}
								helper.updateNurseToOperation(op.getId(), selectWorker.getId());
								helper.sendMessage(selectWorker.getId(), op.getId(), Message.AUTOCHOOSE);
								mes = "系统为你分配了护士[" + selectWorker.getName() + "]!";
								JOptionPane.showMessageDialog(MainFrame.this, mes, "自动分配",
										JOptionPane.INFORMATION_MESSAGE, imageIcon);
							} else if (fromWorker.getPosition().equals("麻醉师")) {
								selectWorker = helper.autoSelectAnesthetist(op.getBeginTime(), m.getFromId());
								if (selectWorker == null) {
									mes = "当天没有有空的麻醉师,建议修改手术时间!";
									JOptionPane.showMessageDialog(MainFrame.this, mes, "人员忙碌",
											JOptionPane.INFORMATION_MESSAGE, imageIcon);
									break;
								} else if (selectWorker.getId().equals(m.getFromId())) {
									mes = "除该麻醉师外当天没有有空的麻醉师,建议修改手术时间!";
									JOptionPane.showMessageDialog(MainFrame.this, mes, "人员忙碌",
											JOptionPane.INFORMATION_MESSAGE, imageIcon);
									break;
								}
								helper.updateAnesthetistToOperation(op.getId(), selectWorker.getId());
								helper.sendMessage(selectWorker.getId(), op.getId(), Message.AUTOCHOOSE);
								mes = "系统为你分配了麻醉师[" + selectWorker.getName() + "]!";
								JOptionPane.showMessageDialog(MainFrame.this, mes, "自动分配",
										JOptionPane.INFORMATION_MESSAGE, imageIcon);
							}
							break;
						case Message.NOTCHOOSE:// 你被从该手术中剔除
							mes = "[" + op.getBeginTime() + "]的手术[" + operationName + "]的发起者更换了参与者,请注意!";
							// 打开消息窗口
							JOptionPane.showMessageDialog(MainFrame.this, mes, "手术参与者更换",
									JOptionPane.INFORMATION_MESSAGE, imageIcon);
							break;
						case Message.AUTOCHOOSE:// 该手术参与者拒绝了参与邀请,你被自动选择为选择为替代者,不可拒绝
							mes = "[" + op.getBeginTime() + "]的手术[" + operationName
									+ "]选择的参与者拒绝了参与邀请,你被自动选择为选择为替代者,不可拒绝!";
							// 打开消息窗口
							JOptionPane.showMessageDialog(MainFrame.this, mes, "手术邀请", JOptionPane.INFORMATION_MESSAGE,
									imageIcon);
							break;
						}
						// 处理完后移除该消息
						helper.removeMessage(m);
					}

					// 等待10秒
					try {
						Thread.sleep(10000);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}

			}
		}).start();
		;
	}

	public static void main(String[] args) {
		RPCHelper helper = null;
		Worker worker = null;

		helper = new RPCHelper();
		helper.login("w0001", "123");
		worker = helper.selectWorkerById("w0001");
		new MainFrame(helper, worker);
	}
}
