package com.operation.rpc;

import java.sql.Date;
import java.util.Vector;

import com.operation.common.Message;
import com.operation.common.Operation;
import com.operation.common.Patient;
import com.operation.common.RemoteCall;
import com.operation.common.Worker;
import com.operation.dao.WorkerHelper;

/**
 * 本类用来向服务器发送客户端的请求并接收回复 本类为客户端与服务器沟通的唯一类,客户端请不要调用本包内的其他类
 * 注意!:1.一个客户端只能建立一个本类的实例化对象,建立两个会被服务器判断为两个客户端 2.客户端发送的第一个请求必须是login();
 */
public class RPCHelper {

	private InvokeServer request = null;
	private boolean logined = false;
	/**
	 * 下面这些是登陆时返回的int变量的意义
	 */
	public static final int OTHER = -2;// 未知错误
	public static final int CONNECT_FAIL = -1;// 连接失败
	public static final int NOT_LOGIN = 0;// 第一个请求不是登陆
	public static final int LOGINED = 1;//该ID已登陆
	public static final int ID_NOT_FOUND = 2;// ID不存在
	public static final int PASSWORD_NOT_TRUE = 3;// 密码错误
	public static final int DOCTOR = 4;// 登陆成功,登陆者为医生
	public static final int ANESTHETIST = 5;// 登陆成功,登陆者为麻醉师
	public static final int NURSE = 6;// 登陆成功,登陆者为护士
	public static final int ADMIN=7;// 登陆成功,登陆者为管理员

	public RPCHelper() {
		System.out.println("一个RPCHelper被创建!");
	}

	// 向服务器发送登陆请求,服务器作出判断后返加一个int参数,返回的int参数意义见上面定义的静态变量
	public int login(String id, String password) {
		if (logined) {
			System.out.println("已经成功登陆,不能再次登陆!");
			return 6;
		}
		request = new InvokeServer();
		int get = -1;
		if (!request.getConnection()) {// 如果连接失败
			request.close();
			return RPCHelper.CONNECT_FAIL;
		} else {
			RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "login",
					new Class[] { String.class, String.class }, new Object[] { id, password });
			get = (Integer) request.invoke(call);
			if (get >= RPCHelper.DOCTOR)// 如果登陆成功,将成员变量logined改为true
				logined = true;
			return get;// 除连接失败外,其它结果都由服务器判断
		}
	}

	// 向服务器发送关闭连接信号并关闭本地的连接
	public void close() {
		if (!logined) {
			return;
		}
		// 向服务器发送关闭请求
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "close", new Class[] {}, new Object[] {});
		request.invoke(call);
		// 关闭连接
		request.close();
		request = null;
		logined = false;
	}

	// 根据Id查询Worker，返回null则表示id不存在
	public Worker selectWorkerById(String id) {
		if (!logined) {
			return null;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "selectWorkerById",
				new Class[] { String.class }, new Object[] { id });
		return (Worker) request.invoke(call);
	}
	// 根据姓名查询Worker，返回null则表示id不存在
	public Vector<Worker> selectWorkerByName(String name) {
		if (!logined) {
			return null;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "selectWorkerByName",
				new Class[] { String.class }, new Object[] { name });
		return (Vector<Worker>) request.invoke(call);
	}
	// 查询某天有空的医生，返回null则表示该天没有有空的医生
	public Vector<Worker> selectDoctorsByDate(Date date) {
		if (!logined) {
			return null;
		}
		return new WorkerHelper().selectDoctorsByDate(date);
	}
	// 查询某天有空的护士，返回null则表示该天没有有空的护士
	public Vector<Worker> selectNursesByDate(Date date) {
		if (!logined) {
			return null;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "selectNursesByDate",
				new Class[] { Date.class }, new Object[] { date });
		return (Vector<Worker>) request.invoke(call);
	}

	// 查询某天有空的麻醉师，返回null则表示该天没有有空的麻醉师
	public Vector<Worker> selectAnesthetistsByDate(Date date) {
		if (!logined) {
			return null;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "selectAnesthetistsByDate",
				new Class[] { Date.class }, new Object[] { date });
		return (Vector<Worker>) request.invoke(call);
	}

	// 增加员工,返回false表示增加失败
	public boolean addWorker(Worker worker) {
		if (!logined) {
			return false;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "addWorker", new Class[] { Worker.class },
				new Object[] { worker });
		return (Boolean) request.invoke(call);
	}

	// 删除员工,返回false表示删除失败
	public boolean deleteWorker(String id) {
		if (!logined) {
			return false;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "deleteWorker",
				new Class[] { String.class }, new Object[] { id });
		return (Boolean) request.invoke(call);
	}

	// 查询所有病人,返回null表示没有病人
	public Vector<Patient> selectAllPatients() {
		if (!logined) {
			return null;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "selectAllPatients", new Class[] {},
				new Object[] {});
		return (Vector<Patient>) request.invoke(call);
	}

	// 根据Id查询病人，返回null则表示id不存在
	public Patient selectPatientById(String id) {
		if (!logined) {
			return null;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "selectPatientById",
				new Class[] { String.class }, new Object[] { id });
		return (Patient) request.invoke(call);
	}

	// 根据名字查询病人，返回null则表示名字不存在
	public Vector<Patient> selectPatientByName(String name) {
		if (!logined) {
			return null;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "selectPatientByName",
				new Class[] { String.class }, new Object[] { name });
		return  (Vector<Patient>) request.invoke(call);
	}

	// 增加病人,返回false表示增加失败
	public boolean addPatient(Patient patient) {
		if (!logined) {
			return false;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "addPatient",
				new Class[] { Patient.class }, new Object[] { patient });
		return (Boolean) request.invoke(call);
	}

	// 查询所有手术,返回null表示没有手术
	public Vector<Operation> selectAllOperations() {
		if (!logined) {
			return null;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "selectAllOperations", new Class[] {},
				new Object[] {});
		return (Vector<Operation>) request.invoke(call);
	}

	// 根据id查单个手术,返回null表示id不存在
	public Operation selectOperationById(String id) {
		if (!logined) {
			return null;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "selectOperationById",
				new Class[] { String.class }, new Object[] { id });
		return (Operation) request.invoke(call);
	}
	// 根据name查手术,返回null表示name不存在
	public Vector<Operation> selectOperationByName(String name) {
		if (!logined) {
			return null;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "selectOperationByName",
				new Class[] { String.class }, new Object[] { name });
		return (Vector<Operation>) request.invoke(call);
	}
	// 某天的所有手术,返回null表示当天没有手术
	public Vector<Operation> selectOperationByDate(Date date) {
		if (!logined) {
			return null;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "selectOperationByDate",
				new Class[] { Date.class }, new Object[] { date });
		return (Vector<Operation>) request.invoke(call);
	}

	// 查询自某日期之后的手术
	public Vector<Operation> selectOperationAfterDate(Date date) {
		if (!logined) {
			return null;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "selectOperationAfterDate",
				new Class[] { Date.class }, new Object[] { date });
		return (Vector<Operation>) request.invoke(call);
	}

	// 查两个日期之间的手术,返回null表示两个日期之间没有手术
	public Vector<Operation> selectOperationsBetween(Date begin, Date end) {
		if (!logined) {
			return null;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "selectOperationsBetween",
				new Class[] { Date.class, Date.class }, new Object[] { begin, end });
		return (Vector<Operation>) request.invoke(call);
	}

	// 查某员工参与的全部手术,返回null表示员工没有手术
	public Vector<Operation> selectWorkerAllOperations(String workerId) {
		if (!logined) {
			return null;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "selectWorkerAllOperations",
				new Class[] { String.class }, new Object[] { workerId });
		return (Vector<Operation>) request.invoke(call);
	}

	// 查某员工某日期参与的单个手术,返回null表示员工当天没有手术
	public Operation selectWorkerOperationsByDate(String workerId, Date date) {
		if (!logined) {
			return null;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "selectWorkerOperationsByDate",
				new Class[] { String.class, Date.class }, new Object[] { workerId, date });
		return (Operation) request.invoke(call);
	}

	// 查某员工两日期之间参与的全部手术,返回null表示员工两个日期之间没有手术
	public Vector<Operation> selectWorkerAllOperationsBetween(String workerId, Date begin, Date end) {
		if (!logined) {
			return null;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "selectWorkerAllOperationsBetween",
				new Class[] { String.class, Date.class, Date.class }, new Object[] { workerId, begin, end });
		return (Vector<Operation>) request.invoke(call);
	}

	// 查某病人参与的全部手术,返回null表示病人没有手术
	public Vector<Operation> selectPatientAllOperations(String patientId) {
		if (!logined) {
			return null;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "selectPatientAllOperations",
				new Class[] { String.class }, new Object[] { patientId });
		return (Vector<Operation>) request.invoke(call);
	}

	// 增加手术,返回false表示增加失败
	public boolean addOperation(Operation operation) {
		if (!logined) {
			return false;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "addOperation",
				new Class[] { Operation.class }, new Object[] { operation });
		return (Boolean) request.invoke(call);
	}

	// 添加或修改参与手术的医生,返回false表示修改失败
	public boolean updateDoctorToOperation(String id, String doctorId) {
		if (!logined) {
			return false;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "updateDoctorToOperation",
				new Class[] { String.class, String.class }, new Object[] { id, doctorId });
		return (Boolean) request.invoke(call);
	}

	// 添加或修改参与手术的护士,返回false表示修改失败
	public boolean updateNurseToOperation(String id, String nurseId) {
		if (!logined) {
			return false;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "updateNurseToOperation",
				new Class[] { String.class, String.class }, new Object[] { id, nurseId });
		return (Boolean) request.invoke(call);
	}

	// 添加或修改参与手术的麻醉师,返回false表示修改失败
	public boolean updateAnesthetistToOperation(String id, String anesthetistId) {
		if (!logined) {
			return false;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "updateAnesthetistToOperation",
				new Class[] { String.class, String.class }, new Object[] { id, anesthetistId });
		return (Boolean) request.invoke(call);
	}

	// 添加或修改医生手术记录,返回false表示修改失败
	public boolean updateDoctorRecordToOperation(String id, String doctorRecord) {
		if (!logined) {
			return false;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "updateDoctorRecordToOperation",
				new Class[] { String.class, String.class }, new Object[] { id, doctorRecord });
		return (Boolean) request.invoke(call);
	}

	// 添加或修改护士手术记录,返回false表示修改失败
	public boolean updateNurseRecordToOperation(String id, String nurseRecord) {
		if (!logined) {
			return false;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "updateNurseRecordToOperation",
				new Class[] { String.class, String.class }, new Object[] { id, nurseRecord });
		return (Boolean) request.invoke(call);
	}

	// 添加或修改麻醉师手术记录,返回false表示修改失败
	public boolean updateAnesthetistRecordToOperation(String id, String anesthetistRecord) {
		if (!logined) {
			return false;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "updateAnesthetistRecordToOperation",
				new Class[] { String.class, String.class }, new Object[] { id, anesthetistRecord });
		return (Boolean) request.invoke(call);
	}

	// 添加或修改手术室,返回false表示修改失败
	public boolean updateRoomToOperation(String id, String roomId) {
		if (!logined) {
			return false;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "updateRoomToOperation",
				new Class[] { String.class, String.class }, new Object[] { id, roomId });
		return (Boolean) request.invoke(call);
	}

	// 查询某天有空的手术室,返回null表示当天没有手术室有空
	public Vector<String> selectRoomByDate(Date date) {
		if (!logined) {
			return null;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "selectRoomByDate",
				new Class[] { Date.class }, new Object[] { date });
		return (Vector<String>) request.invoke(call);
	}

	// 查询某手术室被占用的时间,返回null表示该手术室没有任何一天在使用或id不存在
	public Vector<Date> selectRoomBusyTimesById(String id) {
		if (!logined) {
			return null;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "selectRoomBusyTimesById",
				new Class[] { String.class }, new Object[] { id });
		return (Vector<Date>) request.invoke(call);
	}

	// 向服务器发送一条Message,消息类型见Message类定义的int参数
	public boolean sendMessage(String toWorkerId, String operationId, int messageType) {
		if (!logined) {
			return false;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "sendMessage",
				new Class[] { String.class, String.class, int.class },
				new Object[] { toWorkerId, operationId, messageType });
		return (Boolean) request.invoke(call);
	}
//---------------------------------------以下函数由系统调用,不要用-------------------------------------------------------------------------------------
	// 向服务器查询发给自己的Message
	public Vector<Message> getMessages() {
		if (!logined)
			return null;
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "getMessages", new Class[] {},
				new Object[] {});
		return (Vector<Message>) request.invoke(call);
	}
	
	// 从服务器删除一条Message
	public boolean removeMessage(Message message) {
		if (!logined) {
			return false;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "removeMessage",
				new Class[] { Message.class }, new Object[] { message });
		return (Boolean) request.invoke(call);
	}
	// 查询除refuseId外date+-3天内手术数量最少的护士,返回null表示当天没有有空的护士,返回护士refuseId表示除了当天该id没有有空的护士
	public Worker autoSelectNurse(Date date, String refuseId) {
		if (!logined) {
			return null;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "autoSelectNurse",
				new Class[] { Date.class,String.class }, new Object[] { date,refuseId });
		return (Worker) request.invoke(call);
	}

	// 查询除refuseId外date+-3天内手术数量最少的麻醉师,返回null表示当天没有有空的麻醉师,返回麻醉师refuseId表示除了当天该id没有有空的麻醉师
	public Worker autoSelectAnesthetist(Date date, String refuseId) {
		if (!logined) {
			return null;
		}
		RemoteCall call = new RemoteCall("com.operation.server.ServerHelper", "autoSelectAnesthetist",
				new Class[] { Date.class,String.class }, new Object[] { date,refuseId });
		return (Worker) request.invoke(call);
	}
}
